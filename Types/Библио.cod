--XMLRPC - удаленный вызов процедур (c) Златовратский Павел(ТБ.Бюджет), 2014

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Библиотека непрофильных функций";

inclass
  func Filter(predicate: String; const InArray:Object[]):Object[];
    var i, j, ii:Integer;
    var OutArray: Object[];
    ii = LengthOfArray(InArray);
    j = 1;
    for i = 1 .. ii do
      if InArray[i].Evaluate(predicate) then
        OutArray[j] = InArray[i];
        j = j + 1;  --это быстрее чем каждый раз вычислять длину OutArray;
      end;
    end;
    Result = OutArray;
  end;

  func FilterScal(predicate: String; const InArray:Variant[]):variant[];
    var i, j, ii:Integer;
    var OutArray: variant[];
    var one: Storage;
    ii = LengthOfArray(InArray);
    j = 1;
    one = Storage.Create;
    predicate = "elem " + predicate;
    for i = 1 .. ii do
      one.elem = InArray[i];
      if one.Evaluate(predicate) then
        OutArray[j] = InArray[i];
        j = j + 1;  --это быстрее чем каждый раз вычислять длину OutArray;
      end;
    end;
    Result = OutArray;
  end;
inobject

end