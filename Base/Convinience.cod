--WebTL - библиотека для работа с технологиями Интернет (c) Златовратский Павел(ТБ.Бюджет), 2017

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class  'Полезные функции';

InClass Public

--   Function: GetRowData
--
--   Возвращает даные строки в виде хранилища
--
--   Parameters:
--
--      Data - Объект строки(записи)
--      FetchIntrenal - Извлекать ли служебные поля
--
--   Returns:
--
--      Хранилище объектов
--
--   See Also:
--
--      <GetRecordData>

   func GetRowData(Data:Variant; FetchIntrenal:Logical=False):Storage;
   var RecInfo:ClassInfo;
   var Member:MethodInfo;
   var n,nn:Integer;
   var MustIgnore:String[];
   var Value:Variant;
   var VClassI:ClassInfo;
     MustIgnore=["ТипКласса","ClassType","НовыйКлючЗаписи","НовыйКлючДокумента","NewDocID"];
     RecInfo=Data.ClassInfo;
     Result = Storage.Create;
     nn=RecInfo.MembersCount;
     for n = 1..nn do
         if RecInfo.Member[n] is MethodInfo then
           Member =RecInfo.Member[n] as MethodInfo;
           if not Member.Internal or FetchIntrenal then
              if Member.VisualArea=1 and Member.Kind=0 and not Member.InClassProperty and not (Member.Name in MustIgnore) then
              if Member.ParamsCount=0 then
                 if Member.ResultType.VarType=6 then
                    VClassI=Member.ResultType;
                    if VClassI is SubtableClassInfo then
                       Value=GetSubtableData(Data.GetField(Member.Name),FetchIntrenal);
                    elsif VClassI is StructureClassInfo then
                       Value=GetRowData(Data.GetField(Member.Name),FetchIntrenal);
                    end;
                 else
                    Value=Data.GetField(Member.Name);
                 end;
              else 
                 Value=nil;
              end;
              Result.SetField(Member.Name,Value);
           end;
           end;
         end;
     end;
   end;

   func GetSubtableData(Subt:Subtable; FetchIntrenal:Logical=False):Storage;
   var i:Integer;
      Result = Storage.Create;
      for i = 1..Subt.Count do
          Result.SetField(Str(Subt.IndexByNumber[i]),GetRowData(Subt.ItemsByNumber[i],FetchIntrenal));
      end;
   end;

--   func GetRecordData(RecordKey:String; FetchIntrenal:Logical=False):Storage;
--   var Rec:Document;
--     if Substr(recordKey,1,1)<>"{" then
--        recordKey="{"+Recordkey+"}";
--     end;
--     Rec=GetDocByID(RecordKey);
--     Result=GetRowData(Rec,FetchIntrenal);
--   end;
InObject Private

end