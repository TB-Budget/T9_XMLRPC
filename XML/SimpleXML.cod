--XMLRPC - удаленный вызов процедур (c) Златовратский Павел(ТБ.Бюджет), 2014

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Простейшее формирование XML";
inclass public
  func EasyStrorage(src: String):Storage;
  -- Key1=Value1#Key2=Value2
    var myStorage:Storage;
    var i, ii:Integer;
    var one:String;
    myStorage = Storage.Create;
    ii = WordsCount(src, "#");
    for i = 1..ii do
        one = ExtractWord(src, i, "#");
        myStorage.SetField(ExtractWord(one, 1, "="), ExtractWord(one, 2, "="));
    end;
    Result = myStorage;
  end;

inobject private
  Data[]:String; --Набор данных XML. Массив используется для добавления в конец без переприсвоения
  Depth[]:String; --Список открытых тэгов. FIFO-буфер для закрытия тэгов.
inobject public
  proc ВРез synonym ToRes(more: String);
     Сис2.Функции.AddInArray(Data, more);
  end;

  proc ОткрытьТэг synonym OpenTag(Name: String; Attrib: Storage);
    var I:Integer;
    ToRes("<" + Name);
    for i = 1..Attrib.Count do
       ToRes(" " + Attrib.IndexByNumber[i] + "='");
       ToRes(Str(Attrib.ItemsByNumber[i]) + "'");
    end;
    ToRes(">");
    InsertInArray(Depth, 1, Name);
  end;

  func ЗакрытьТэг synonym CloseTag: String;
    var Name:String;
    Name = Depth[1];
    DeleteFromArray(Depth,1);
    ToRes("</" + Name + ">");
    Result = Name;
  end;

  proc СоздатьТэг synonym CreateTag(Name: String; Content: String; Attrib: Storage);
     OpenTag(Name, Attrib);
     ToRes(Content);
     CloseTag;
  end;

  func ОднойСтрокой synonym OneString(Encoding: String='windows-1251'): String;
  -- Представление набранного XML качестве сроки, прописав кодировку в заголовок
  -- !!! Истинная кодировка символов остается 1251!!!
    var i, ii: Integer;
    Result = '<?xml version="1.0" encoding="'+encoding+'"?>'+chr(10);
    ii = LengthOfArray(self.Data);
    for i = 1..ii do
      Result = Result + self.Data[i];
    end;
  end;

  proc ВФайл synonym ToFile(Path: String; Encoding:String='');
    var F: TextFile;
    var Fenc: TextFile.Encodings;
    if Encoding = '' or Encoding = 'win1251' or Encoding = '1251':
       Encoding = 'windows-1251';
       Fenc = TextFile.ANSI;
    fi;
    if Encoding = '' or Encoding = 'win1251' or Encoding = '1251':
       Encoding = 'windows-1251';
       Fenc = TextFile.ANSI;
    fi;
    if Encoding = 'UTF-8' then
       Fenc = TextFile.UTF8;
    end;

    if Fenc = TextFile.UTF8 then
       -- Формируем заголововок с BOM
      F = TextFile.Create(Path, fmCreate, TextFile.Binary);
      F.Write(chr(0xEF) + chr(0xBB) + chr(0xBF));  -- UTF8
      F.Flush;
      F = Textfile.Create(Path, fmOpenReadWrite, Fenc);
    else
      F = Textfile.Create(Path, fmCreate, Fenc);
    end;

    F.Write(self.OneString(Encoding));
    F.Flush;
  end;
end