--XMLRPC - удаленный вызов процедур (c) Златовратский Павел(ТБ.Бюджет), 2014

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Test";
  import Classes Conversion;
  import Classes Calling;
  import Classes Client;
  import Classes Examples;
  import Classes Convinience;
inclass

inobject
var Out:String;
var Inp:String;

var RPCUrl:String;
var RPCMeth:String;

var filter_by:TemplateSection;
var Key:String[];
var Value:String[];
--------------------------------------------------------------------------------
--{ Обработчики событий бланка

  proc Button1OnClick(Sender :Button);
  var doc,root:AutoObject;
  --var testSt:Storage;
  doc=AutoObject.Create("Msxml2.DOMDocument.6.0");
  doc.Async=False;
  doc.loadXML('<?xml version="1.0" encoding="windows-1251"?>');
  root=AsXmlRpcNode(doc,tInt);
  if tInt=FromXmlRpc(root) then
        Message("Int Ok");
  end;
  root=AsXmlRpcNode(doc,tNum);
  if tNum=FromXmlRpc(root) then
        Message("Numeric Ok");
  end;
  root=AsXmlRpcNode(doc,tStr);
  if tStr=FromXmlRpc(root) then
        Message("String Ok");
  end;
  root=AsXmlRpcNode(doc,tDat);
  if tDat=FromXmlRpc(root) then
        Message("Date Ok");
  end;
  root=AsXmlRpcNode(doc,tArr);
  if tArr=FromXmlRpc(root) then
        Message("Array Ok");
  end;
  --doc.CreateElement("test");
--  doc.AppendChild(root);
--  root.AppendChild(AsXmlRpcNode(doc,tInt));

 -- root.AppendChild(AsXmlRpcNode(doc,tStr));
--  root.AppendChild(AsXmlRpcNode(doc,tDat));
--  root.AppendChild(AsXmlRpcNode(doc,tArr));
--  testSt=Storage.Create;
--  testSt.first="first";
--  testSt.next="nest";
--  root.AppendChild(AsXmlRpcNode(doc,testSt));
--  Out=doc.xml;


  end;

  proc Button11OnClick(Sender :Button);
  var u: TUL.Unicode;
    u = TUL.Unicode.FromUTF16(Inp);
    Out = Str(u.chars);
  end;

  proc ButtonU2OnClick(Sender :Button);
  var u: TUL.Unicode;
    u = TUL.Unicode.Create;
    FromStr(u.chars, Inp);
    Out = u.ToUTF16;
      
  end;


  proc Button2OnClick(Sender :Button);
    Out=Caller(Inp);
  end;

  proc Button3OnClick(Sender :Button);
  var xRes,x1:AutoObject;
    xRes=AutoObject.Create("Msxml2.DOMDocument.6.0");
    xRes.Async=False;
    xRes.loadXML('<?xml version="1.0" encoding="windows-1251"?>');
    x1=EncodeParams(xRes,[GetRecordData(Inp)]);
    xRes.AppendChild(x1);
    Out=xRes.xml;
  end;


  proc Button4OnClick(Sender :Button);
    Out=TUL.Base64.Encode64(Inp);
  end;

  proc Button5OnClick(Sender :Button);
    Out=TUL.Base64.Decode64(Inp);
  end;

  proc Button21OnClick(Sender :Button);
  var params: variant[];
  var filter: Storage;
  var i:Integer;
  var res: variant;
  var f: Tul.FuncObj;
    filter = Storage.Create;
    for i = 1..filter_by.Count do
        filter.SetField(Key[i], Value[i]);
    end;
    params[1] = filter;

    --res = SimpleCall("http://localhost:9766","TransList",["*.401.50.*",1.1.2017, 1.1.2018]);
    f = XMLRPCFunc.CreateEx("http://localhost:9766", "TransList", False);
    res = f.Call(["*.401.50.*",1.1.2017, 1.1.2018]);
    params = res;
    Out = Str(res);
  end;

  proc Button6OnClick(Sender :Button);
   var st:Storage;
     st = Storage.create;
     st.sux = self;
     Out = st.Evaluate("sux.Inp + '123' ");

  end;

--}

end